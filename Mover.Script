<script>
        document.addEventListener('DOMContentLoaded', () => {
            const coverPage = document.getElementById('coverPage');
            const exploreButton = document.getElementById('exploreButton');
            const mainContent = document.getElementById('mainContent');

            exploreButton.addEventListener('click', () => {
                coverPage.classList.add('hidden');
                mainContent.classList.remove('hidden');
                window.scrollTo(0, 0);
            });

            document.querySelectorAll('.sticky-nav a').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    document.querySelector(this.getAttribute('href')).scrollIntoView({
                        behavior: 'smooth'
                    });
                });
            });

            function wrapLabel(str, maxWidth) {
                if (str.length <= maxWidth) {
                    return str;
                }
                const words = str.split(' ');
                let lines = [];
                let currentLine = words[0];
                for (let i = 1; i < words.length; i++) {
                    if (currentLine.length + words[i].length + 1 < maxWidth) {
                        currentLine += ' ' + words[i];
                    } else {
                        lines.push(currentLine);
                        currentLine = words[i];
                    }
                }
                lines.push(currentLine);
                return lines;
            }

            const tooltipTitleCallback = {
                plugins: {
                    tooltip: {
                        callbacks: {
                            title: function(tooltipItems) {
                                const item = tooltipItems[0];
                                let label = item.chart.data.labels[item.dataIndex];
                                if (Array.isArray(label)) {
                                  return label.join(' ');
                                }
                                return label;
                            }
                        }
                    }
                }
            };

            const budgetCtx = document.getElementById('budgetChart').getContext('2d');
            new Chart(budgetCtx, {
                type: 'doughnut',
                data: {
                    labels: [
                        wrapLabel('Desarrollo IA y Plataforma', 16),
                        wrapLabel('Inventario Inicial', 16),
                        wrapLabel('Marketing y Publicidad', 16),
                        wrapLabel('Operaciones y Logística', 16),
                        wrapLabel('Capital Humano y Admin.', 16)
                    ],
                    datasets: [{
                        label: 'Distribución de Inversión',
                        data: [40, 25, 15, 10, 10],
                        backgroundColor: ['#0EA5E9', '#38BDF8', '#7DD3FC', '#BAE6FD', '#E0F2FE'],
                        borderColor: '#1E293B',
                        borderWidth: 4,
                        hoverOffset: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    ...tooltipTitleCallback,
                    plugins: {
                         ...tooltipTitleCallback.plugins,
                        legend: {
                            position: 'bottom',
                            labels: {
                                color: '#CBD5E1',
                                padding: 15,
                                font: {
                                    size: 12
                                }
                            }
                        }
                    }
                }
            });

            async function callGeminiAPI(prompt, outputElement, buttonElement, loadingElement, buttonTextElement) {
                buttonElement.disabled = true;
                buttonTextElement.classList.add('hidden');
                loadingElement.classList.remove('hidden');
                outputElement.innerHTML = 'Generando...';

                let chatHistory = [];
                chatHistory.push({ role: "user", parts: [{ text: prompt }] });

                const payload = { contents: chatHistory };
                const apiKey = "";
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

                let retryCount = 0;
                const maxRetries = 5;
                let delay = 1000;

                while (retryCount < maxRetries) {
                    try {
                        const response = await fetch(apiUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(payload)
                        });

                        if (response.status === 429) {
                            retryCount++;
                            delay *= 2;
                            await new Promise(res => setTimeout(res, delay));
                            continue;
                        }

                        const result = await response.json();

                        if (result.candidates && result.candidates.length > 0 &&
                            result.candidates[0].content && result.candidates[0].content.parts &&
                            result.candidates[0].content.parts.length > 0) {
                            outputElement.innerHTML = result.candidates[0].content.parts[0].text;
                        } else {
                            outputElement.innerHTML = 'Lo siento, no pude generar una respuesta. Inténtalo de nuevo.';
                        }
                        break;
                    } catch (error) {
                        outputElement.innerHTML = 'Ocurrió un error al conectar con la IA. Inténtalo más tarde.';
                        break;
                    } finally {
                        buttonElement.disabled = false;
                        buttonTextElement.classList.remove('hidden');
                        loadingElement.classList.add('hidden');
                    }
                }

                if (retryCount === maxRetries) {
                    outputElement.innerHTML = 'Demasiados intentos. Por favor, inténtalo de nuevo más tarde.';
                    buttonElement.disabled = false;
                    buttonTextElement.classList.remove('hidden');
                    loadingElement.classList.add('hidden');
                }
            }

            const productIdeaInput = document.getElementById('productIdeaInput');
            const productIdeaButton = document.getElementById('productIdeaButton');
            const productIdeaButtonText = document.getElementById('productIdeaButtonText');
            const productIdeaLoading = document.getElementById('productIdeaLoading');
            const productIdeaOutput = document.getElementById('productIdeaOutput');

            productIdeaButton.addEventListener('click', () => {
                const userQuery = productIdeaInput.value.trim();
                if (!userQuery) {
                    productIdeaOutput.innerHTML = 'Por favor, describe el tipo de producto para generar ideas.';
                    return;
                }
                const prompt = `Eres un experto en innovación de productos tecnológicos para JACMA Technology. Genera 3-5 ideas de características innovadoras o conceptos de productos para el siguiente tipo de producto o necesidad: "${userQuery}". Las ideas deben ser concisas, creativas y enfocadas en la personalización o mejora de la experiencia del usuario. Presenta las ideas como una lista numerada.`;
                callGeminiAPI(prompt, productIdeaOutput, productIdeaButton, productIdeaLoading, productIdeaButtonText);
            });
        });
    </script>
